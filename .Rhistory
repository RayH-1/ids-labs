se = list(cluster1, cluster2, cluster3), omit.stat = c("f", "ser"),
star.cutoffs = c(0.05, 0.01, 0.001), header = FALSE)
stargazer(pmodel1, pmodel2, pmodel3,  title = "FE Regression for Religions", type = "text",
se = list(cluster1, cluster2, cluster3), omit.stat = c("f", "ser"),
star.cutoffs = c(0.05, 0.01, 0.001), header = FALSE)
stargazer(pmodel1, pmodel2, pmodel3,
title = "",
type = "latex",
se = list(cluster1, cluster2, cluster3),
header = FALSE,
digits = 3,
font.size = "small",
align = TRUE,
star.cutoffs = c(0.05, 0.01, 0.001),
omit.table.layout = "n" )
# Model 3 Caste
##SC
pmodel3 <- pdata %>%
plm(log_avg_rad ~ log_SC*log_literate + log_SC*log_female + log_num_households,
index = c( "uid", "year"), model = "within",  data=.)
pmodel4 <- pdata %>%
plm(log_avg_rad ~ log_ST*log_literate + log_ST*log_female + log_num_households,
index = c( "uid", "year"), model = "within",  data=.)
# Model 3 Caste
##SC
pmodel3 <- pdata %>%
plm(log_avg_rad ~ log_SC*log_literate + log_SC*log_female ,
index = c( "uid", "year"), model = "within",  data=.)
summary(pmodel3)
#1. Breusch-Pagan test for Homoskedacity, p-value < 0.05, alternative hypothesis: heteroskedacity
bptest(log_avg_rad~log_SC + as.factor(uid), data = pdata, studentize = FALSE)
#1. Breusch-Pagan test for Homoskedacity, p-value < 0.05, alternative hypothesis: heteroskedacity
bptest(log_avg_rad~log_SC + as.factor(uid), data = pdata, studentize = FALSE)
#2.	Breusch-Godfrey/Wooldridge test for serial correlation in panel models, p-value < 0.05, alternative hypothesis: serial correlation in idiosyncratic errors
pbgtest(pmodel3)
coeftest(pmodel3, vcovHC(pmodel3, method = "arellano", cluster="group"))
pmodel4 <- pdata %>%
plm(log_avg_rad ~ log_ST*log_literate + log_ST*log_female ,
index = c( "uid", "year"), model = "within",  data=.)
summary(pmodel4)
pmodel1 <- pdata %>%
plm(log_avg_rad ~ log_SC + log_ST,
index = c( "uid", "year"), model = "within",  data=.)
cluster1 <- vcovHC(pmodel1, method = "arellano", cluster="group")
pmodel2 <- pdata %>%
plm(log_avg_rad ~ log_SC*log_village_area + log_SC*log_female + log_SC*log_literate ,
index = c( "uid", "year"), model = "within",  data=.)
cluster2 <- vcovHC(pmodel2, method = "arellano", cluster="group")
pmodel3 <- pdata %>%
plm(log_avg_rad ~ log_ST*log_village_area + log_ST*log_literate + log_ST*log_female,
index = c( "uid", "year"), model = "within",  data=.)
cluster3 <- vcovHC(pmodel3, method = "arellano", cluster="group")
pmodel4 <- pdata %>%
plm(log_avg_rad ~ log_SC*log_village_area + log_SC*log_female + log_SC*log_literate + log_ST*log_village_area + log_ST*log_literate + log_ST*log_female ,
index = c( "uid", "year"), model = "within",  data=.)
cluster4 <- vcovHC(pmodel4, method = "arellano", cluster="group")
stargazer(pmodel1, pmodel2, pmodel3, pmodel4,  title = "FE Regression for Caste", type = "text",
se = list(cluster1, cluster2, cluster3, cluster4),
star.cutoffs = c(0.05, 0.01, 0.001), header = FALSE)
stargazer(pmodel1, pmodel2, pmodel3, pmodel4,
title = "",
type = "latex",
se = list(cluster1, cluster2, cluster3, cluster4),
header = FALSE,
digits = 3,
font.size = "small",
align = TRUE,
star.cutoffs = c(0.05, 0.01, 0.001),
omit.table.layout = "n" )
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
mydata <- read.csv("data/ACLED_countries.csv",
stringsAsFactors = F)
View(mydata)
setwd("/Users/hibaahmad/Documents/IDS Fall 2023/Labs/labs")
?mean
?mean
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
4*9
sqrt(144)
abs(-3)
4 > 2
4 <= 2
result <- 5/3
result
result <- 5-3
result
my_vector <- c(1, 2, 3)
my_character_vector <- c("Welcome", "everyone")
my_list <- list(1, "a", TRUE)
my_vector <- (1, 2, 3)
my_vector <- c(1, 2, 3)
my_character_vector <- c("Welcome", "everyone")
length(my_vector)
str(my_character_vector)
str(my_list)
my_matrix_2 <- matrix(4,3)
dim(my_matrix)
my_matrix <- matrix(nrow=3, ncol=3)
dim(my_matrix)
my_df <- data.frame(id = letters[1:10], x = 1:10, y = 11:20)
my_df
dim(my_df)
head(my_df)
tail(my_df)
nrow(my_df)
ncol(my_df)
str(my_df)
names(my_df)
# turning vectors into factors
my_vector <- c("single","single","married","married","single")
my_factor <- as.factor(my_vector)
# direct creation of factors
my_factor <- factor(c("single","single","married","married","single"))
levels(my_factor)
pop1 <- c(1379, 1324, 323, 261, 208)
pop1
pop2 <- c(194, 187, 161, 142, 127)
pop <- c(pop1, pop2)
pop
str(pop)
cname <- c("CHN", "IND", "USA", "IDN", "BRA")
str(cname)
asia <- c(TRUE, TRUE, F, T, F)
str(asia)
regime <- c("Autocracy", "FlawedDem", "FullDem", "FlawedDem", "FlawedDem")
regime <- c("Autocracy", "FlawedDem", "FullDem", "FlawedDem", "FlawedDem")
str(regime)
regime <- as.factor(regime)
str(regime)
regime <- factor(c("Autocracy", "FlawedDem", "FullDem", "FlawedDem", "FlawedDem"))
str(regime)
regime <- as.character(regime)
str(regime)
asia <- as.character(asia)
str(asia)
asia <- as.logical(asia)
str(asia)
no_good <- c(a,b,c)
yes_good <- c("a","b","c")
no_good_either <- c(one, two, three)
no_good_either <- c("one", "two", "three")
vec <- c("1", "2", "3")
str(vec)
pop1
pop1_double <- pop1 * 2
pop1_double
res <- pop1 + pop2
pop1
pop2
res <- pop1 + pop2
res
pop_c <- c(pop1, pop2)
pop_c
min(pop)
max(pop)
mean(pop)
mean(pop)
sum(pop)/length(pop)
pop1
pop1[1]
pop1[4]
cname[1]
pop[c(2,5)]
cname[c(2,5)]
first <- pop[1]
length(pop)
first <- pop[length(pop)]
first
pop[length(pop)]
regime
regime[2] <- "FullDem"
regime
pop
pop[3] <- pop[3] - 10
pop
pop[c(3,5)] <- pop[c(3,5)] - 10
pop
cindex <- seq(from = 1, to = length(pop1), by = 1)
cindex
seq(1,5,1)
seq(2, 10, 2)
rep(30, 5)
completed <- rep(c("no","yes"), 5)
completed
completed2 <- rep(c("yes","no"), each = 5)
completed2
pop1
names(pop1)
cname
names(pop1) <- cname
names(pop1)
pop1
pop1[names(pop1) == "BRA"]
pop1[pop1 >= mean(pop1)]
pop1[pop1 < max(pop1) & names(pop1) != "USA"]
cname == "IDN"
regime[cname == "IDN"]
which(cname == "IDN")
regime[which(cname == "IDN")]
pop1[asia == T & regime != "Autocracy"]
pop1[asia == T | regime != "Autocracy"]
pop1[asia == T | regime != "Autocracy"]
install.packages("foreign")
#install.packages("foreign") #alternatively use "Install" button
library(foreign)
mydata <- read.csv("data/ACLED_countries.csv")
View(mydata)
mydata <- read.csv("data/ACLED_countries.csv",
stringsAsFactors = F)
mydata <- read.csv("data/ACLED_countries.csv",
stringsAsFactors = F)
str(mydata)
names(mydata)
names(mydata)[3] <- "nconflict"
names(mydata)
summary(mydata)
nrow(mydata) # Number of rows
ncol(mydata) # Number of columns
dim(mydata) # Rows first then columns.
mydata[1, ]
mydata[c(1,2), ]
mydata[1:5,]
mydata[3,7]
mydata[1,1]
mydata[100,3]
which(colnames(mydata) == "nconflict")
mydata[,3]
mydata$nconflict
table(mydata$region)
summary(mydata$nconflict)
table(mydata$region, mydata$nconflict > mean(mydata$nconflict))
mydata[,1]
max(mydata$nconflict)
max(mydata$nconflict)
mydata$country[mydata$conflict == max(mydata$nconflict)]
mydata$country[mydata$nconflict == max(mydata$nconflict)]
mydata$country
mydata$country[seq(2, length(mydata$country), 2)]
vec <- c(4, 1, 2, NA, 3)
mean(vec) #Result is NA!
sum(vec) #Result is NA!
mean(vec, na.rm = T)
sum(vec, na.rm = T)
mydata
dim(mydata)
obs <- c("Germany", "Europe", NA, NA, NA)
mydata_new <- rbind(mydata, obs)
dim(mydata_new)
mydata$nconflict_fatalities <- mydata$nconflict - mydata$nconflict_no_fatalities
head(mydata, 3) #prints out the first 3 rows of the data frame
mydata$av_fatalities <- mydata$fatalities/mydata$nconflict
mydata_na <- mydata[mydata$region == "Northern Africa",]
max(mydata_na$nconflict)
mydata_na$country[mydata_na$nconflict == max(mydata_na$nconflict)]
getwd()
## Saving data
Suppose we wanted to save this newly created data frame. We have multiple options to do so. If we wanted to save it as a native `.RData` format, we would run the following command.
getwd()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::include_graphics("./pics/github_desktop_cloning.gif")
knitr::include_graphics("./pics/github_desktop_stage_commit.gif")
knitr::include_graphics("./pics/github_desktop_pull_and_push.gif")
library(tidyverse)
tidyverse_packages()
knitr::include_graphics("pics/kacheln3.png")
knitr::include_graphics("pics/tidy_data.png")
knitr::include_graphics("pics/pivot_longer.png")
stocks = data.frame( ## Could use "tibble" instead of "data.frame" if you prefer
time = as.Date('2009-01-01') + 0:1,
X = rnorm(2, 0, 1),
Y = rnorm(2, 0, 2),
Z = rnorm(2, 0, 4)
)
stocks
stocks |> pivot_longer(-time, names_to="stock", values_to="price")
## Write out the argument names this time: i.e. "names_to=" and "values_to="
tidy_stocks <- stocks |>
pivot_longer(-time, names_to="stock", values_to="price")
knitr::include_graphics("pics/pivot_wider.png")
tidy_stocks |> pivot_wider(names_from=stock, values_from = price)
tidy_stocks |> pivot_wider(names_from=time, values_from = price)
economists = data.frame(name = c("Adam.Smith", "Paul.Samuelson", "Milton.Friedman"))
economists
economists |> separate(name, c("first_name", "last_name"))
economists |>
separate_wider_delim(
cols = name,
delim = ".",
names = c("first_name", "last_name")
)
economists$attribute <- c("m-34", "m-23", "f-38")
economists
economists |>
separate_wider_position(attribute, c(sex = 1, 1, age = 2)
)
jobs = data.frame(
name = c("Jack", "Jill"),
occupation = c("Homemaker", "Philosopher, Philanthropist, Troublemaker")
)
jobs
## Now split out Jill's various occupations into different rows
jobs |> separate_rows(occupation)
gdp = data.frame(
yr = rep(2016, times = 4),
mnth = rep(1, times = 4),
dy = 1:4,
gdp = rnorm(4, mean = 100, sd = 2)
)
gdp
## Combine "yr", "mnth", and "dy" into one "date" column
gdp |> unite(date, c("yr", "mnth", "dy"), sep = "-")
gdp_u = gdp |> unite(date, c("yr", "mnth", "dy"), sep = "-") |> as_tibble()
gdp_u
library(lubridate)
gdp_u |> mutate(date = ymd(date))
library(palmerpenguins)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(palmerpenguins)
names(penguins)
# compare this output with the one below
penguins |>
dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T))
penguins |>
dplyr::group_by(species) |>
dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T))
penguins |>
dplyr::summarise(heaviest_penguin = max(body_mass_g, na.rm = T), .by = species)
penguins |>
dplyr::summarise(heaviest_penguin = max(body_mass_g, na.rm = T), .by = c(species, sex))
library(nycflights13)
#flights
#planes
left_join(flights, planes) |>
select(year, month, day, dep_time, arr_time, carrier, flight, tailnum, type, model)|>
head(3) ## Just to save vertical space in output
library(palmerpenguins)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(palmerpenguins)
library(tidyverse)
names(penguins)
# compare this output with the one below
penguins |>
dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T))
penguins |>
dplyr::group_by(species) |>
dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T))
penguins |>
dplyr::summarise(heaviest_penguin = max(body_mass_g, na.rm = T), .by = species)
penguins |>
dplyr::summarise(heaviest_penguin = max(body_mass_g, na.rm = T), .by = c(species, sex))
library(nycflights13)
#flights
#planes
left_join(flights, planes) |>
select(year, month, day, dep_time, arr_time, carrier, flight, tailnum, type, model)|>
head(3) ## Just to save vertical space in output
left_join(
flights,
planes |> rename(year_built = year), ## Not necessary w/ below line, but helpful
by = "tailnum" ## Be specific about the joining column
) |>
select(year, month, day, dep_time, arr_time, carrier, flight, tailnum, year_built, type, model) |>
head(3)
left_join(
flights,
planes, ## Not renaming "year" to "year_built" this time
by = "tailnum"
) |>
select(contains("year"), month, day, dep_time, arr_time, carrier, flight, tailnum, type, model) |>
head(3)
islands <- data.frame(name = c("Torgersen", "Biscoe", "Dream"),
coordinates = c("64°46′S 64°5′W","65°26′S 65°30′W","64°44′S 64°14′W"))
left_join(
penguins,
islands,
by = c("island" = "name")
) |>
head(3)
left_join(
penguins,
islands,
by = join_by(island == name)
) |>
head(3)
#or simply
left_join(
penguins,
islands,
join_by(island == name)
) |>
head(3)
starwars |> slice(c(1, 5))
starwars |> filter(gender=="feminine") |> pull(height)
starwars |> count(species) |> head(6)
starwars |> distinct(species) |> pull() |> sort() |> magrittr::extract(1:5)
starwars |> select(where(is.numeric)) |> names()
starwars |>
mutate(across(where(is.numeric), scale)) |>
head(3)
starwars |>
mutate(
height_cat = case_when(
height < 160 ~ "tiny",
height >= 160 & height < 190 ~ "medium",
height >= 190 & height < 220 ~ "tall",
height >= 220 ~ "giant"
)
) |>
pull(height_cat) |> table()
crossing(side = c("left", "right"), height = c("top", "bottom"))
dplyr::select(penguins, species, island, year, sex, body_mass_g)
# you just need to utilize & and type the logical operator for the species
dplyr::filter(penguins, year == 2007 & species == "Chinstrap")
penguins |>
dplyr::filter(year == 2009 & species == "Chinstrap") |>
dplyr::select(species, sex, year)
penguins |>
dplyr::group_by(species, year) |>
dplyr::summarize(lightest_penguin = min(body_mass_g, na.rm = T))
zknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
zknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(palmerpenguins)
library(tidyverse)
names(penguins)
# compare this output with the one below
penguins |>
dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T))
penguins |>
dplyr::group_by(species) |>
dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T))
penguins |>
dplyr::summarise(heaviest_penguin = max(body_mass_g, na.rm = T), .by = species)
penguins |>
dplyr::summarise(heaviest_penguin = max(body_mass_g, na.rm = T), .by = c(species, sex))
library(nycflights13)
#flights
#planes
left_join(flights, planes) |>
select(year, month, day, dep_time, arr_time, carrier, flight, tailnum, type, model)|>
head(3) ## Just to save vertical space in output
left_join(
flights,
planes |> rename(year_built = year), ## Not necessary w/ below line, but helpful
by = "tailnum" ## Be specific about the joining column
) |>
select(year, month, day, dep_time, arr_time, carrier, flight, tailnum, year_built, type, model) |>
head(3)
left_join(
flights,
planes, ## Not renaming "year" to "year_built" this time
by = "tailnum"
) |>
select(contains("year"), month, day, dep_time, arr_time, carrier, flight, tailnum, type, model) |>
head(3)
islands <- data.frame(name = c("Torgersen", "Biscoe", "Dream"),
coordinates = c("64°46′S 64°5′W","65°26′S 65°30′W","64°44′S 64°14′W"))
left_join(
penguins,
islands,
by = c("island" = "name")
) |>
head(3)
left_join(
penguins,
islands,
by = join_by(island == name)
) |>
head(3)
#or simply
left_join(
penguins,
islands,
join_by(island == name)
) |>
head(3)
starwars |> slice(c(1, 5))
starwars |> filter(gender=="feminine") |> pull(height)
starwars |> count(species) |> head(6)
starwars |> distinct(species) |> pull() |> sort() |> magrittr::extract(1:5)
starwars |> select(where(is.numeric)) |> names()
starwars |>
mutate(across(where(is.numeric), scale)) |>
head(3)
starwars |>
mutate(
height_cat = case_when(
height < 160 ~ "tiny",
height >= 160 & height < 190 ~ "medium",
height >= 190 & height < 220 ~ "tall",
height >= 220 ~ "giant"
)
) |>
pull(height_cat) |> table()
crossing(side = c("left", "right"), height = c("top", "bottom"))
penguins |> filter(sex == "female") |> pull("Height")
penguins |> filter(sex == "female") |> pull("height")
penguins |> filter(sex == "female")
penguins |> filter(sex == "female") |> pull(bill_length_mm)
penguins |> unique
penguins |> unique()
penguins |> unique(sex)
penguins |> unique(island)
penguins %>% unique(island)
penguins %>% sex %>% unique()
penguins |> unique() |> group_by(sex)
penguins |> group_by(species) |> unique()
penguins |> ungroup()
penguins |> group_by(species) |> unique()
penguins |> ungroup()
penguins |> filter(species) |> unique()
